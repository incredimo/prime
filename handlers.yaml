# Maps annotation names to execution templates
# {code} will be substituted with the block's contents.
# For multi-action handlers, use `name: { action1: "template", action2: "template" }`.
# The default action when no annotation is given will be 'execute'.

shell:
  execute: "{code}" # This is the default if `shell` has no annotation (e.g., ```shell\nls\n```)
  read_file: "cat {code}"
  list_dir: "ls -F {code}" # Lists files and directories with '/' for directories
  search: "grep -r -n -A 2 '{code}' ." # Search recursively for {code}, showing 2 lines after

python:
  execute: "python3 - <<'PYCODE'\n{code}\nPYCODE"
  lint: "pylint --rcfile=none --disable=all --enable=C0301,C0303,W0611,W0612 - <<'PYCODE'\n{code}\nPYCODE" # Example linting check

# New dedicated file operations handler for clarity and safety
# For 'write' or 'append' actions using the 'file' handler:
# The LLM needs to place the target `file_path` on the first line of the code block,
# and the actual `file_content` on subsequent lines.
# Example: ```file write path/to/your/file.txt\nYour file content here\n```
file:
  read: "cat \"{code}\"" # {code} is expected to be the file path to read
  write: "mkdir -p \"$(dirname \"{file_path}\")\" && printf %s '{file_content}' > \"{file_path}\"" # Creates dir if needed, writes content
  append: "mkdir -p \"$(dirname \"{file_path}\")\" && printf %s '{file_content}' >> \"{file_path}\"" # Creates dir if needed, appends content

# You can add more handlers as needed, for example:
# docker:
#   run: "docker run --rm alpine sh -c '{code}'"
#   pull: "docker pull {code}" # {code} would be image name